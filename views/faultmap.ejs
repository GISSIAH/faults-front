<!DOCTYPE html>
<html>

<head>
    <!----------------------------------------------------------
    Copyright (c) 2017-2018 Jean-Marc VIGLINO,
    released under CeCILL-B (french BSD like) licence: http://www.cecill.info/
------------------------------------------------------------>
    <title>Faults</title>





    <!-- jQuery -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-1.11.0.min.js"></script>

    <!-- Openlayers -->
    <link rel="stylesheet" href="https://openlayers.org/en/latest/css/ol.css" />
    <script type="text/javascript" src="https://openlayers.org/en/latest/build/ol.js"></script>
    <script
        src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL,Object.assign">
    </script>

    <!-- ol-ext -->
    <link rel="stylesheet" href="https://cdn.rawgit.com/Viglino/ol-ext/master/dist/ol-ext.min.css" />
    <script type="text/javascript" src="https://cdn.rawgit.com/Viglino/ol-ext/master/dist/ol-ext.min.js"></script>
    <style>
        .map {
            height: 400px;
            width: 100%;
        }

        .overlay-container {
            background-color: blueviolet;
            width: 150px;
            color: white;
            text-align: center;
            border-radius: 1px;
            padding: 2px 0;
            position: absolute;
            z-index: 1;
            bottom: 100%;
        }
    </style>


</head>

<body>

    <!-- DIV pour la carte -->
    <div id="map" style="width:100%; height:400px"></div>

    <script type="text/javascript">
        // Layers
        var layers = [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            })
        ]
        // The map
        var map = new ol.Map({
            target: 'map',
            view: new ol.View({
                zoom: 6,
                center: [34.12, -13.55],
                projection: 'EPSG:4326'
            }),
            layers: layers
        });

        var url = '/data/trans'
        var vsource = new ol.source.Vector({
            url: url,
            format: new ol.format.GeoJSON()
        })
        var trans = new ol.layer.VectorImage({
            source: vsource,
            visible: true,
            title: 'transformers'
        });


        var url2 = '/data/pole'
        var vsource2 = new ol.source.Vector({
            url: url2,
            format: new ol.format.GeoJSON()
        })
        var pole = new ol.layer.VectorImage({
            source: vsource2,
            visible: true,
            title: 'poles'
        });


        var url3 = '/data/fac'
        var vsource3 = new ol.source.Vector({
            url: url3,
            format: new ol.format.GeoJSON()
        })
        var fac = new ol.layer.VectorImage({
            source: vsource3,
            visible: true,
            title: 'facilities'
        });

        var url4 = '/data/faults'
        var vsource4 = new ol.source.Vector({
            url: url4,
            format: new ol.format.GeoJSON()
        })
        var faults = new ol.layer.VectorImage({
            source: vsource4,
            visible: true,
            title: 'faults'
        });

       







        map.addLayer((faults))
        //map.addLayer(trans);
        //map.addLayer(pole);
        //map.addLayer(fac);
        //console.log(trans);
        //console.log(fac);
        //console.log(pole);
        console.log(faults);
        var select = new ol.interaction.Select({})
        map.addInteraction(select)
        var search = new ol.control.SearchFeature(
        {   
            source: vsource4,
            property:'meter_num'
        });
    map.addControl(search);
    // Select feature when click on the reference index
    search.on('select', function(e)
        {   select.getFeatures().clear();
            select.getFeatures().push (e.search);
            var p = e.search.getGeometry().getFirstCoordinate();
            map.getView().animate({ center:p });
        });
        
        // Select feature when click on the reference index
        

        var popup = new ol.Overlay.PopupFeature({
            popupClass: 'default anim',
            select: select,
            canFix: true,
            template: {
                title: function (f) {
                        return f.get('meter_num');
                    },
                attributes: // [ 'region', 'arrond', 'cantons', 'communes', 'pop' ]
                {
                    'fault_desc':{title:'Fault'},
                    'date': {title: 'Date'}
                    
                }
        }
        })
        map.addOverlay(popup)
    </script>

</body>

</html>